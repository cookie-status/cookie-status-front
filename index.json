[
{
	"uri": "https://www.cookiestatus.com/",
	"title": "Cookie Status",
	"tags": [],
	"description": "",
	"content": " Cookie Status The cookiestatus.com website is a learning resource for the various tracking protection mechanisms implemented by the major browsers and browser engines.\nFor more information about the service, please consult the FAQ.\nPlease submit suggestions and corrections as issues in the GitHub project. Click here to find your way.\n Current status Last updated: 26 November 2019\n    Chrome Edge (Beta) Firefox Safari     Mechanism n/a Tracking prevention Enhanced Tracking Protection (ETP) Intelligent Tracking Prevention 2.3 (ITP)   Deployed in n/a 78.0.276.8 69.0 Safari 13 on macOS   Latest release Link Link Link Link   Default protection mode n/a Balanced Standard ITP enabled   Classification of \u0026ldquo;known trackers\u0026rdquo; n/a Trust Protection Lists Disconnect.me Algorithmic   Cookies in 3rd party context No restrictions. Access restricted for known trackers. Access restricted for known trackers. Access restricted if no prior cookies set on the domain. Access restricted for known trackers.   Cookies in 1st party context No restrictions. No restrictions. No restrictions. For cookies set with document.cookie, expiration set to 7 days by default, and 24 hours on pages with URL decoration (query parameters or fragments) when referring domain is a known tracker.   Other browser storage in 3rd party context No restrictions. Access restricted for known trackers. No restrictions for other domains. localStorage and IndexedDB restricted for known trackers. sessionStorage is not restricted. No restrictions for other domains. localStorage is partitioned and reset between application launches. IndexedDB is restricted. sessionStorage is not restricted.   Other browser storage in 1st party context No restrictions. No restrictions. No restrictions. Restricted to 7 days maximum storage on pages with URL decoration (query parameters or fragments) when referring domain is a known tracker.   Referrer Default browser policy (no-referrer-when-downgrade) Default browser policy (no-referrer-when-downgrade) Default browser policy (no-referrer-when-downgrade) Default browser policy (no-referrer-when-downgrade). For referrers that are known trackers, where the referring page also has URL decoration (query parameters or fragments), referrer is downgraded to eTLD+1 (e.g. https://app.site.com/?id=123 becomes https://site.com).     FAQ 1. Why does this resource exist? Web browsers are going through fairly momentous shifts in order to better respond to the increasing number of data breaches and cases of data misuse by third parties.\nUnfortunately, each browser (and the underlying browser engine) seems to have their own interpretation of how to best tackle the problem, which leads to a diverse set of features across the browser landscape.\nWhat\u0026rsquo;s worse, the information about how these tracking protection mechanisms are deployed is all over the place: in release notes, in developer documentation, in Twitter threads, in working groups, in feature drafts, in bug patches, etc.\nThe purpose of the Cookie Status resource is to (attempt to) collect this information in one place for easy access and perusal.\nThere is no commercial agenda behind this project. In fact, there is no agenda other than knowledge transfer.\n2. Why only the four browsers? Just to kick things off. Hopefully the open-source nature of this project will invite others to contribute details about browsers that are doing significant work with regard to user privacy (e.g. Brave).\n3. What cookies / browser storage does Cookie Status set and why? Cookie Status doesn\u0026rsquo;t use browser cookies, localStorage, or IndexedDB.\nsessionStorage is used to add some functionality to navigation (marking visited pages, highlighting search terms).\nNothing in browser storage is sent to any third parties at any time.\nIf you see anything contrary to the above, please raise an issue about this.\n"
},
{
	"uri": "https://www.cookiestatus.com/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Introduction General introduction to tracking prevention / protection, what it is, and what its various implications are.\n"
},
{
	"uri": "https://www.cookiestatus.com/chrome/",
	"title": "Chrome",
	"tags": [],
	"description": "",
	"content": "  Chrome Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/edge/",
	"title": "Edge",
	"tags": [],
	"description": "",
	"content": "  Edge Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/firefox/",
	"title": "Firefox",
	"tags": [],
	"description": "",
	"content": "  Firefox Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/safari/",
	"title": "Safari",
	"tags": [],
	"description": "",
	"content": "  Safari Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/safari/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/firefox/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/edge/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/chrome/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/introduction/tracking-protection/",
	"title": "Tracking protection",
	"tags": [],
	"description": "",
	"content": " Tracking protection, and similar measures, seek to protect the user against harmful data collection and exploitation by third-party platforms, scripts, and applications.\nIn short, tracking protection, tracking prevention, anti-tracking, cookie blocking, content blocking, etc. are designed to:\n Identify and classify domains that have been recognized as employing tracking mechanisms harmful to (browsers\u0026rsquo; intepretation of) user privacy. If a script or resource is loaded in a third-party context from such a domain, restrict access to browser storage so that the trackers could not exploit data stored within. In some cases, restrict storage access in a first-party context where it\u0026rsquo;s likely that it could be exploited for cross-site tracking purposes.  In this introductory chapter, we\u0026rsquo;ll quickly go through some of the key terminology around tracking protection. You are then advised to visit the other pages of Cookie Status for more details.\n Cookies First-party and third-party context Cross-site tracking Restrict storage access  Cookies Browser cookies are key-value pairs (e.g. id=abcd1234) of information stored on the user\u0026rsquo;s computer. Websites set them in order to persist information from one page to the next. This is because the web is effectively stateless - only a very limited set of information is shared from one page the next. By writing information into browser storage, that information persists even if the pages the user navigates on are unloaded and their storage is purged.\nWhen the user browses a website, that site has the capability to set or write cookies on the user\u0026rsquo;s computer, and the site also has the ability to get or read the cookies stored on the user\u0026rsquo;s computer. Due to browser security and same-origin restrictions - the website can only get and set cookies for the domain the user is currently on, i.e. in a first-party context (see the next chapter).\nMore specifically, the website has access to any cookies written on the current domain the user is browsing on, and on any domains higher up in the domain (or DNS) hierarchy, all the way to the effective top-level domain (eTLD) plus one part.\n  Cookies set on current domain and on the eTLD\u0026#43;1   As an example, let\u0026rsquo;s say the user is browsing blog.ecommerce.cookiestatus.com. This is the domain the user is currently on.\nThe following three domains are all considered to be in the same domain hierarchy:\n blog.ecommerce.cookiestatus.com (current domain) ecommerce.cookiestatus.com (one level up in the hierarchy) cookiestatus.com (effective top-level-domain (.com) plus one part (cookiestatus))  The following three domains are not part of the same hierarchy:\n store.ecommerce.cookiestatus.com (not an ancestor of blog.ecommerce.cookiestatus.com) blog.ecommerce.cookiestatus.co.uk (different eTLD) blog.ecommerce.storagestatus.com (different eTLD+1)  The user\u0026rsquo;s browser can set cookies on any of the three domains in the first list. For instance, they can set an identifier cookie on the eTLD+1 with JavaScript like this:\ndocument.cookie = 'userId=abcd1234;domain=cookiestatus.com';  If the user\u0026rsquo;s browser requests a resource from cookiestatus.com, such as an image or a JavaScript file, then the response from the web server can also use the Set-Cookie header to set a cookie on cookiestatus.com, and it will then be available for reading on ecommerce.cookiestatus.com and blog.ecommerce.cookiestatus.com.\nSimilarly, any HTTP request for any resource on one of the three domains in the first list would include all cookies written on any one of the three domains as well. Thus the web server can read these stored bits of information and parse them however they like.\nThe browser can also read any cookies set on these three domains with JavaScript (except if they have been specifically flagged as HttpOnly, meaning they can only be read in HTTP headers).\nconsole.log(document.cookie); // Outputs \u0026quot;userId=abcd1234\u0026quot;  These examples show how cookies are accessed in a first-party context.\nFirst-party and third-party context It\u0026rsquo;s common in the parlance of the web to talk about first-party cookies and third-party cookies. This is a bit of a misnomer. Cookies are pieces of information that are stored on the user\u0026rsquo;s computer. There is no distinction between first-party and third-party in how these cookies are classified and stored on the computer.\nWhat matters is the context of the access.\nThe examples presented in the previous chapter describe cookie access in a first-party context. When the user\u0026rsquo;s browser requests a resource from the same domain hierarchy (up to eTLD+1) as the website the user is currently on, that request will include all the cookies that have been set for that domain.\nThis is important. The endpoint of the request has access to all cookies written on the domain that is mapped to that endpoint. This means that if the endpoint is controlled by a third party, any requests for resources from that endpoint would include cookies you might not want to share with the third party.\n However, if the user\u0026rsquo;s browser requests a resource from a domain that is not part of the domain hierarchy the user is currently on, the request is a cross-origin request.\nAs mentioned above, the endpoint has access to all cookies written on the domain mapped to that endpoint. Thus if blog.ecommerce.cookiestatus.com makes a request from image.imagestore.com, the request would include all the cookies written on the user\u0026rsquo;s computer for image.imagestore.com and imagestore.com.\nSimilarly, if the endpoint responds with a Set-Cookie header, they can write cookies on image.imagestore.com with the HTTP response.\nThe endpoint at image.imagestore.com would not have access to cookies written on blog.ecommerce.cookiestatus.com, even if the request originated from there.\n This type of cookie access happens in a third-party context, because the cookies are read from and written on a domain that is not part of the domain hierarchy the user is currently on.\n You can get and set cookies in third-party context with JavaScript as well. If the website loads content from the external domain in an \u0026lt;iframe\u0026gt; element, for example, the user\u0026rsquo;s browser can run document.cookie commands within that \u0026lt;iframe\u0026gt;, and the reading and writing would happen in the context of that domain and not the one the user is currently on.\n Accessing cookies in a third-party context is necessary for some benign features of the web, such as persisting user authentication across the domains of an organization (SSO), or for passing information about user\u0026rsquo;s marketing consent from one part of the organization to another.\nHowever, cookie access in a third-party context can be abused as well, because it can be used for cross-site tracking without the user\u0026rsquo;s consent or awareness.\nCross-site tracking A common thread in the rhetoric is that browsers want to quench cross-site tracking. Here\u0026rsquo;s how Safari describes it:\n Imagine a user who first browses example-products.com for a new gadget and later browses example-recipies.com for dinner ideas. If both these sites load resources from example-tracker.com and example-tracker.com has a cookie stored in the user’s browser, the owner of example-tracker.com has the ability to know that the user visited both the product website and the recipe website, what they did on those sites, what kind of web browser was used, et cetera. This is what’s called cross-site tracking and the cookie used by example-tracker.com is called a third-party cookie. In our testing we found popular websites with over 70 such trackers, all silently collecting data on users.\n In essence, cross-site tracking utilizes centralized tracking domains for scripts to communicate with from the sites the user actually visits. These tracking domains leverage third parties\u0026rsquo; access to browser storage (mainly cookies) to build profiles of all the sites the user has visited.\n Cross-site tracking   To continue the examples from the previous chapters, when the user\u0026rsquo;s browser makes a request for image.imagestore.com while on the blog.ecommerce.cookiestatus.com, the endpoint at image.imagestore.com will now know that the request originated from blog.ecommerce.cookiestatus.com, as this is included in the origin and referer [sic] headers.\nThus the endpoint at image.imagestore.com could now check if the user has an identifier cookie set on that domain, and they can augment the profile for that identifier with knowledge that the user has visited blog.ecommerce.cookiestatus.com.\nIf the user then visits another page on the internet that also communicates with image.imagestore.com, then that endpoint will be privy to yet another origin, and they can keep building the profile.\nThis is the essence of cross-site tracking - using a consolidated and centralized store (e.g. a cookie) to collect information from different domains.\nRestrict storage access Browsers\u0026rsquo; main weapon against cross-site tracking is restricting storage access. Because there are valid reasons for cross-site tracking (persisting user authentication, shopping baskets, consent status), tracking protection methods restrict storage access for third parties that have been identified and classified as compromising user privacy.\nMozilla Firefox, for example, describes their own effort like this:\n In order to help give users the private web browsing experience they expect and deserve, Firefox will strip cookies and block storage access from third-party tracking content, based on lists of tracking domains by Disconnect.\n This approach of comparing the third-party domains against a curated list is utilized also by Microsoft Edge. Here\u0026rsquo;s how they introduce Edge\u0026rsquo;s tracking prevention:\n We’ve added a new component to Microsoft Edge, Trust Protection Lists, that contains the latest information on which organizations may be trying to track users on the web. This component allows us to be flexible with where we source details on what a tracker is and when we deliver updated lists to our users.\n The Safari browser has the most interesting approach. Instead of a binary approach (blocked vs. not blocked) and a set list of domains, Safari\u0026rsquo;s Intelligent Tracking Prevention uses multiple methods to restrict the storage access for third parties that are algorithmically classified as having cross-site tracking capabilities. Here\u0026rsquo;s how they describe the classification process:\n A machine learning model is used to classify which top privately-controlled domains have the ability to track the user cross-site, based on the collected statistics. Out of the various statistics collected, three vectors turned out to have strong signal for classification based on current tracking practices: subresource under number of unique domains, sub frame under number of unique domains, and number of unique domains redirected to. All data collection and classification happens on-device.\n However, Safari\u0026rsquo;s approach is binary in a sense - you can either enable all cross-site tracking or none.\n Safari privacy settings   The Chrome browser is, for now, devoid of any significant tracking protection measures. However, they have contributed to the discussion with their privacy sandbox initiative, as well as with upcoming features involving cookie restrictions and referrer policies.\n"
},
{
	"uri": "https://www.cookiestatus.com/introduction/summary-of-exploits/",
	"title": "Summary of exploits",
	"tags": [],
	"description": "",
	"content": " There are a number of ways in which data exploitation is attempted. On this page, these will be listed superficially.\nThe problem is that all these method also serve valid and benign use cases, which means that when browsers seek to prevent these, they also end up preventing non-malicious and non-exploitative use of browser storage.\nAnd this is the nature of the beast. The very same APIs and methodologies that are used, for example, to improve the user experience of the site, are being repurposed by third parties for malicious data collection and manipulation.\nSee the chapter on Impact for more details on how countering these exploits is impacting other, non-harmful use cases.\nThe exploits listed here are:\n Cookies in third-party context Cookie syncing CNAME records URL decoration Referrer decoration  Cookies in third-party context Leveraging browser cookies in third-party context (so-called third-party cookies) is the age-old way how advertising technology vendors build audiences for improving their targeting mechanisms.\nBy observing the user\u0026rsquo;s browsing behavior across the web, ad tech vendors can build robust profiles and deduce the user\u0026rsquo;s interest and affinity groups based on the sites they visit. Naturally, the robustness of this profiling depends on how many sites are included in this network, which is why large technology companies have the upper hand due to an extended reach and an established ecosystem.\nThese vendors are able to build these audiences if the user\u0026rsquo;s browser does not block access to these cookies in a third-party context.\nFor example, if you browse a site that has a Google DoubleClick pixel firing, or has Google Analytics set up in a way so that the site communicates with DoubleClick servers, you might see the following network request:\n Request to DoubleClick on the first site   It\u0026rsquo;s a request to DoubleClick\u0026rsquo;s domain (the request URL is something like https://1234567.fls.doubleclick.net/activityi...). As you can see in the cookie header, the user\u0026rsquo;s browser has cookies set on this domain, and one of these cookies is named DSID with a long, hashed identifier string.\nNow, visit another, completely different site that also sends requests to DoubleClick servers and observe the network requests:\n Request to DoubleClick on the second site   It\u0026rsquo;s another request to DoubleClick. This time the subdomain might be different, e.g. https://98765432.fls.doubleclick.net/activityi..., but since the cookie is written on the eTLD+1, you can see the result in the screenshot:\nThe DSID value is exactly the same as on the other website.\nThus, when you visit these two sites without restricting access to cookies in a third-party context, DoubleClick will know that your particular DSID is now associated with visits to these two websites.\nThis is how ad tech vendors leverage cookie access in a third-party context to profile internet users.\nCookie syncing CNAME records URL decoration Referrer decoration "
},
{
	"uri": "https://www.cookiestatus.com/safari/intelligent-tracking-prevention/",
	"title": "Intelligent Tracking Prevention (ITP)",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/firefox/enhanced-tracking-protection/",
	"title": "Enhanced Tracking Protection (ETP)",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/edge/tracking-prevention/",
	"title": "Tracking Prevention",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/chrome/privacy-sandobx/",
	"title": "Privacy Sandbox",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/introduction/impact/",
	"title": "Impact",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/safari/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/firefox/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/edge/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/chrome/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/introduction/how-to-prepare/",
	"title": "How to prepare",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]