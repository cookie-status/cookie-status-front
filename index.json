[
{
	"uri": "https://www.cookiestatus.com/",
	"title": "Cookie Status",
	"tags": [],
	"description": "",
	"content": " Cookie Status The cookiestatus.com website is a learning resource for the various tracking protection mechanisms implemented by the major browsers and browser engines.\nFor more information about the service, please consult the FAQ.\nPlease submit suggestions and corrections as issues in the GitHub project. Click here to find your way.\n Current status Last updated: 3 December 2019\n Suggest an edit\n    Chrome Edge (Beta) Firefox Safari     Mechanism n/a Tracking prevention Enhanced Tracking Protection (ETP) Intelligent Tracking Prevention 2.3 (ITP)   Deployed in n/a 78.0.276.8 69.0 Safari 13 on macOS   Latest release Link Link Link Link   Default protection mode n/a Balanced Standard ITP enabled   Classification of \u0026ldquo;known trackers\u0026rdquo; n/a Trust Protection Lists Disconnect.me Algorithmic   Cookies in 3rd party context No restrictions. Access restricted for known trackers. Access restricted for known trackers. Access restricted if no prior cookies set on the domain. Access restricted for known trackers.   Cookies in 1st party context No restrictions. No restrictions. No restrictions. For cookies set with document.cookie, expiration set to 7 days by default, and 24 hours on pages with URL decoration (query parameters or fragments) when referring domain is a known tracker.   Other browser storage in 3rd party context No restrictions. Access restricted for known trackers. No restrictions for other domains. localStorage and IndexedDB restricted for known trackers. sessionStorage is not restricted. No restrictions for other domains. localStorage is partitioned and reset between application launches. IndexedDB is restricted. sessionStorage is not restricted.   Other browser storage in 1st party context No restrictions. No restrictions. No restrictions. Restricted to 7 days maximum storage on pages with URL decoration (query parameters or fragments) when referring domain is a known tracker.   Referrer Default browser policy (no-referrer-when-downgrade) Default browser policy (no-referrer-when-downgrade) Default browser policy (no-referrer-when-downgrade) Default browser policy (no-referrer-when-downgrade). For referrers that are known trackers, where the referring page also has URL decoration (query parameters or fragments), referrer is downgraded to eTLD+1 (e.g. https://app.site.com/?id=123 becomes https://site.com).     Bubbling under  Safari: isLoggedIn (original explainer and WebKit changeset for experimental feature)\n Safari: Downgrade of all third-party referrers\n Safari: Block all third-party cookies, regardless of prior access\n Firefox, Edge, Safari, Chrome: strict-origin-when-cross-origin default referrer policy\n  FAQ 1. Why does this resource exist? Web browsers are going through fairly momentous shifts in order to better respond to the increasing number of data breaches and cases of data misuse by third parties.\nUnfortunately, each browser (and the underlying browser engine) seems to have their own interpretation of how to best tackle the problem, which leads to a diverse set of features across the browser landscape.\nWhat\u0026rsquo;s worse, the information about how these tracking protection mechanisms are deployed is all over the place: in release notes, in developer documentation, in Twitter threads, in working groups, in feature drafts, in bug patches, etc.\nThe purpose of the Cookie Status resource is to (attempt to) collect this information in one place for easy access and perusal.\nThere is no commercial agenda behind this project. In fact, there is no agenda other than knowledge transfer.\n2. Why only the four browsers? Just to kick things off. Hopefully the open-source nature of this project will invite others to contribute details about browsers that are doing significant work with regard to user privacy (e.g. Brave).\n3. What cookies / browser storage does Cookie Status set and why? Cookie Status doesn\u0026rsquo;t use browser cookies, localStorage, or IndexedDB.\nsessionStorage is used to add some functionality to navigation (marking visited pages, highlighting search terms).\nNothing in browser storage is sent to any third parties at any time.\nIf you see anything contrary to the above, please raise an issue about this.\n"
},
{
	"uri": "https://www.cookiestatus.com/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Introduction General introduction to tracking prevention / protection, what it is, and what its various implications are.\n"
},
{
	"uri": "https://www.cookiestatus.com/safari/",
	"title": "Safari",
	"tags": [],
	"description": "",
	"content": "  Safari Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/firefox/",
	"title": "Firefox",
	"tags": [],
	"description": "",
	"content": "  Firefox Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/edge/",
	"title": "Edge",
	"tags": [],
	"description": "",
	"content": "  Edge Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/safari/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/firefox/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/edge/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/chrome/current-status/",
	"title": "Current status",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/chrome/",
	"title": "Chrome",
	"tags": [],
	"description": "",
	"content": "  Chrome Lorem Ipsum.\n"
},
{
	"uri": "https://www.cookiestatus.com/introduction/tracking-protection/",
	"title": "Tracking protection",
	"tags": [],
	"description": "",
	"content": " TABLE OF CONTENTS  Tracking protection, and similar measures, seek to protect the user against harmful data collection and exploitation by third-party platforms, scripts, and applications.\nIn short, tracking protection, tracking prevention, anti-tracking, cookie blocking, content blocking, etc. are designed to:\n Identify and classify domains that have been recognized as employing tracking mechanisms harmful to (browsers\u0026rsquo; interpretation of) user privacy. If a script or resource is loaded in a third-party context from such a domain, restrict access to browser storage so that the trackers can not exploit data stored within. In some cases, restrict storage access in a first-party context where it\u0026rsquo;s likely that it could be exploited for cross-site tracking purposes.  In this introductory chapter, we\u0026rsquo;ll gloss over some of the key terminology regarding tracking protection. You are then advised to visit the other pages of Cookie Status for more details.\n Cookies First-party and third-party context Cross-site tracking Restrict storage access  Cookies Browser cookies are key-value pairs (e.g. id=abcd1234) of information stored on the user\u0026rsquo;s computer. Websites set them in order to persist information from one page to the next. This is because the web is effectively stateless - only a very limited set of information is shared from one page to the next. By writing information into browser storage, that information persists even if the pages the user navigates on are unloaded and their storage purged.\nWhen the user browses a website, that site has the capability to set or write cookies on the user\u0026rsquo;s computer, and the site also has the ability to get or read the cookies stored on the user\u0026rsquo;s computer. Due to browser security and same-origin restrictions - the website can only get and set cookies for the domain the user is currently on, i.e. in a first-party context (see the next chapter).\nMore specifically, the website has access to any cookies written on the current domain the user is browsing on, and on any domains higher up in the domain (or DNS) hierarchy, all the way to the effective top-level domain (eTLD) plus one part.\n  Cookies set on current domain and on the eTLD\u0026#43;1   As an example, let\u0026rsquo;s say the user is browsing blog.ecommerce.cookiestatus.com. This is the domain the user is currently on.\nThe following three domains are all considered to be in the same domain hierarchy:\n blog.ecommerce.cookiestatus.com (current domain) ecommerce.cookiestatus.com (one level up in the hierarchy) cookiestatus.com (effective top-level-domain (.com) plus one part (cookiestatus))  The following three domains are not part of the same hierarchy:\n store.ecommerce.cookiestatus.com (different subdomain) blog.ecommerce.cookiestatus.co.uk (different eTLD) blog.ecommerce.storagestatus.com (different eTLD+1)  The user\u0026rsquo;s browser can set cookies on any of the three domains in the first list. For instance, they can set an identifier cookie on the eTLD+1 with JavaScript like this:\ndocument.cookie = 'userId=abcd1234;domain=cookiestatus.com';  If the user\u0026rsquo;s browser requests a resource from cookiestatus.com, such as an image or a JavaScript file, then the response from the web server can also use the Set-Cookie header to set a cookie on cookiestatus.com, and it will then be available for reading on ecommerce.cookiestatus.com and blog.ecommerce.cookiestatus.com.\nSimilarly, any HTTP request for any resource residing on a domain in the same hierarchy would include all the cookies written on that domain or any domain higher in the hierarchy in the cookie header. The web server can read these stored bits of information and parse them however they like.\n Sample cookie header with all cookies available on the target domain   The browser can also read any cookies available to the current domain with JavaScript (except if they have been specifically flagged as HttpOnly, meaning they can only be read in HTTP headers).\nconsole.log(document.cookie); // Outputs \u0026quot;userId=abcd1234\u0026quot;  These examples show how cookies are accessed in a first-party context.\nFirst-party and third-party context It\u0026rsquo;s common in the parlance of the web to talk about first-party cookies and third-party cookies. This is a bit of a misnomer. Cookies are pieces of information that are stored on the user\u0026rsquo;s computer. There is no distinction between first-party and third-party in how these cookies are classified and stored on the computer.\nWhat matters is the context of the access.\nThe examples presented in the previous chapter describe cookie access in a first-party context. When the user\u0026rsquo;s browser requests a resource from the same domain hierarchy (up to eTLD+1) as the website the user is currently on, that request will include all the cookies that have been set for that domain.\nThis is important. The endpoint of the request has access to all cookies written on the domain that is mapped to that endpoint. This means that if the endpoint is controlled by a third party, any requests for resources from that endpoint would include cookies you might not want to share with the third party.\n However, if the user\u0026rsquo;s browser requests a resource from a domain that is not part of the domain hierarchy the user is currently on, cookies would not be shared between the source and the target of the request.\nAs mentioned above, the endpoint has access to all cookies written on the domain mapped to that endpoint. Thus if blog.ecommerce.cookiestatus.com makes a request to image.imagestore.com, the request would include all the cookies written on the user\u0026rsquo;s computer for image.imagestore.com and imagestore.com.\nSimilarly, if the endpoint responds with a Set-Cookie header, they can write cookies on image.imagestore.com or imagestore.com with the HTTP response.\nThe endpoint at image.imagestore.com would not have access to cookies written on blog.ecommerce.cookiestatus.com, even if the request originated from the latter.\n This type of cookie access occurs in a third-party context, because the cookies are read from and written on a domain that is not part of the domain hierarchy the user is currently on.\n You can get and set cookies in third-party context with JavaScript as well. If the website loads content from the external domain in an \u0026lt;iframe\u0026gt; element, for example, the user\u0026rsquo;s browser can run document.cookie commands within that \u0026lt;iframe\u0026gt;, and the reading and writing would happen in the context of that domain and not the one the user is currently on.\n Accessing cookies in a third-party context is necessary for some benign features of the web, such as persisting user authentication across the domains of an organization (SSO), or for passing information about user\u0026rsquo;s marketing consent from one part of the organization to another.\nHowever, cookie access in a third-party context can be abused as well, because it can be used for cross-site tracking without the user\u0026rsquo;s consent or awareness.\nCross-site tracking A common thread in the rhetoric is that browsers want to quench cross-site tracking. Here\u0026rsquo;s how Safari describes it:\n Imagine a user who first browses example-products.com for a new gadget and later browses example-recipies.com for dinner ideas. If both these sites load resources from example-tracker.com and example-tracker.com has a cookie stored in the user’s browser, the owner of example-tracker.com has the ability to know that the user visited both the product website and the recipe website, what they did on those sites, what kind of web browser was used, et cetera. This is what’s called cross-site tracking and the cookie used by example-tracker.com is called a third-party cookie. In our testing we found popular websites with over 70 such trackers, all silently collecting data on users.\n In essence, cross-site tracking utilizes centralized tracking domains for scripts to communicate with from the sites the user actually visits. These tracking domains leverage third parties\u0026rsquo; access to browser storage (mainly cookies) to build profiles of all the sites the user has visited.\n Cross-site tracking   To continue the examples from the previous chapters, when the user\u0026rsquo;s browser makes a request for image.imagestore.com while on the blog.ecommerce.cookiestatus.com, the endpoint at image.imagestore.com will now know that the request originated from blog.ecommerce.cookiestatus.com, as this is included in the origin and referer [sic] headers.\nThus the endpoint at image.imagestore.com could now check if the user has an identifier cookie set on that domain, and they can augment the profile for that identifier with knowledge that the user has visited blog.ecommerce.cookiestatus.com.\nIf the user then visits another page on the internet that also communicates with image.imagestore.com, then that endpoint will be privy to yet another origin, and they can keep building the profile.\nThis is the essence of cross-site tracking - using a consolidated and centralized store (e.g. a cookie) to collect information from different domains.\nRestrict storage access Browsers\u0026rsquo; main weapon against cross-site tracking is restricting storage access. Because there are valid reasons for cross-site tracking (persisting user authentication, shopping baskets, consent status), tracking protection methods restrict storage access for third parties that have been identified and classified as compromising user privacy.\nMozilla Firefox, for example, describes their own effort like this:\n In order to help give users the private web browsing experience they expect and deserve, Firefox will strip cookies and block storage access from third-party tracking content, based on lists of tracking domains by Disconnect.\n This approach of comparing the third-party domains against a curated list is utilized also by Microsoft Edge. Here\u0026rsquo;s how they introduce Edge\u0026rsquo;s tracking prevention:\n We’ve added a new component to Microsoft Edge, Trust Protection Lists, that contains the latest information on which organizations may be trying to track users on the web. This component allows us to be flexible with where we source details on what a tracker is and when we deliver updated lists to our users.\n The Safari browser has the most interesting approach. Instead of a binary approach (blocked vs. not blocked) and a set list of domains, Safari\u0026rsquo;s Intelligent Tracking Prevention uses multiple methods to restrict the storage access for third parties that are algorithmically classified as having cross-site tracking capabilities. Here\u0026rsquo;s how they describe the classification process:\n A machine learning model is used to classify which top privately-controlled domains have the ability to track the user cross-site, based on the collected statistics. Out of the various statistics collected, three vectors turned out to have strong signal for classification based on current tracking practices: subresource under number of unique domains, sub frame under number of unique domains, and number of unique domains redirected to. All data collection and classification happens on-device.\n However, Safari\u0026rsquo;s approach is binary in a sense - you can either enable all cross-site tracking or none.\n Safari privacy settings   The Chrome browser is, for now, devoid of any significant tracking protection measures. However, they have contributed to the discussion with their privacy sandbox initiative, as well as with upcoming features involving cookie restrictions and referrer policies.\n"
},
{
	"uri": "https://www.cookiestatus.com/introduction/summary-of-exploits/",
	"title": "Summary of exploits",
	"tags": [],
	"description": "",
	"content": " TABLE OF CONTENTS  There are a number of ways in which data exploitation is attempted by malicious trackers. On this page, these will be listed superficially.\nThe problem is that all these methods also serve valid and benign use cases, which means that when browsers seek to prevent these, they also end up preventing non-malicious and non-exploitative use of browser storage.\nAnd this is the nature of the beast. The very same APIs and methodologies that are used, for example, to improve the user experience of the site are simultaneously being repurposed by third parties for data collection and manipulation.\nSee the chapter on Impact for more details on how countering these exploits is impacting other, potentially benign use cases.\nThe exploits listed here are:\n Cookies in third-party context Link decoration Referrer decoration Fingerprinting CNAME records  Cookies in third-party context Leveraging browser cookies in third-party context (so-called third-party cookies) is the age-old way how advertising technology vendors build audiences for improving their targeting mechanisms.\nBy observing the user\u0026rsquo;s browsing behavior across the web, ad tech vendors can build robust profiles and deduce the user\u0026rsquo;s interest and affinity groups based on the sites they visit. Naturally, the robustness of this profiling depends on how many sites are included in this network, which is why large technology companies have the upper hand due to an extended reach and an established ecosystem.\nThese vendors are able to build these audiences if the user\u0026rsquo;s browser does not block access to third-party cookies.\nFor example, if you browse a site that has a Google DoubleClick pixel firing, or has Google Analytics set up so that the site communicates with DoubleClick servers, you might see the following network request:\n Request to DoubleClick on the first site   It\u0026rsquo;s a request to DoubleClick\u0026rsquo;s domain (the request URL is something like https://1234567.fls.doubleclick.net/activityi...). As you can see in the cookie header, the user\u0026rsquo;s browser has cookies set on this domain, and one of these cookies is named DSID with a long, hashed identifier string.\nNow, visit another, completely different site that also sends requests to DoubleClick servers and observe the network requests:\n Request to DoubleClick on the second site   It\u0026rsquo;s another request to DoubleClick. This time the subdomain might be different, e.g. https://98765432.fls.doubleclick.net/activityi..., but since the cookie is written on the eTLD+1, you can see the result in the screenshot:\nThe DSID value is exactly the same as on the other website.\nThus, when you visit these two sites without restricting access to third-party cookies, DoubleClick will know that your particular DSID is now associated with visits to these two websites.\nThis type of covert tracking is called cross-site tracking, and it can be used by vendors to build their own profiles. However, it can also be abused by data management platforms (DMPs) that participate in cookie matching between multiple vendors to build an even larger user database.\n Unfortunately, this very same method is used for benign scenarios, such as persisting user authentication across different websites of the same organization.\nIf cookies in third-party context are blocked by the browser, then there are other means to achieve the same type of profiling, such as by repurposing the first-party context.\nLink decoration When vendors find out that their attempts to leverage cookies in third-party context are thwarted, they will repurpose the first-party context to continue tracking users across websites.\nFor example, if the vendor has a first-party ecosystem (such as a social media platform or a suite of products behind a shared authentication) coupled with an ad tech network (or they participate in cookie matching), they are well positioned to hijack first-party storage to build a profile of visitors.\nRepurposing first-party context is more effective if the vendor has a first-party service to which the user can log in. Services that only exist in third-party contexts (such as display networks) are most vulnerable to tracking protection measures.\n When the user is logged in to the vendor platform, they have a unique identifier that the vendor can use to recognize them. There is nothing exceptional about this - it\u0026rsquo;s exactly how any login would authenticate a user.\nHowever, what the vendor can then do is decorate every single link leading out of the platform with a hash containing the user\u0026rsquo;s unique identifier. Thus a link like https://www.cookiestatus.com/ now becomes https://www.cookiestatus.com/?vendorid=ABCDefgh1234IJKL5678mnop.\nWhen the user follows the link, all it takes is for any one of the vendor\u0026rsquo;s JavaScript libraries (or a collaborating partner\u0026rsquo;s JavaScript libraries) to run on the site for the ID to be written into first-party storage as a cookie, thus being impervious to third-party context blocking, and to be sent with e.g. remarketing or conversion pixel requests back to the vendor.\n URL decoration by vendors   This way the vendor will know that the logged-in user not only followed the link, because they can track clicks on the link, but they\u0026rsquo;ll also know what they did on the target site due to the JavaScript firing on that site and communicating this information back to the vendor.\nLink decoration is not always reliable. Sites might introduce redirects that strip parameters from the URL (or break if non-whitelisted parameters are added), and tracking protection mechanisms (especially ITP) can be used to handicap first-party storage when link decoration is involved. Thus vendor platforms can also decorate the referrer string to avoid having their identifiers paraded in the URL of the target site.\nReferrer decoration Referrer decoration works exactly the same as link decoration, except instead of decorating the URL to which the user is navigated, the service creates an intermediate page through which the user is redirected.\nThis page would have the user identifier in its URL.\nBy doing so, the document.referrer string (and the referer HTTP header) would include the identifier, and the vendor\u0026rsquo;s JavaScript libraries could, again, use this information to relay the user\u0026rsquo;s navigation patterns back to the vendor.\nReferrer decoration is resilient to things like redirects stripping out query parameters of the target URL, but due to browsers\u0026rsquo; referrer policies, it is not a very reliable way to pass information from one site to the other.\n Browsers are taking a stronger stance against leaking information in referrers, adopting policies like strict-origin-when-cross-origin by default (this would strip referrer strings to their hostnames when the request is not same-site). Safari\u0026rsquo;s intelligent tracking prevention is going even further, stripping document.referrer to eTLD+1 (so https://my.site.com/?id=12345 would become https://site.com) in cross-site tracking scenarios.\nIf the vendor does not have a strong enough first-party ecosystem to decorate links or referrers with user identifiers, they can attempt cross-site tracking through browser and device fingerprinting.\nFingerprinting Fingerprinting is a methodology where user\u0026rsquo;s browser and device settings, at least those that are exposed to JavaScript APIs and HTTP headers, are used to build a digital fingerprint of the user\u0026rsquo;s browser instance.\nThe logic is that since the user is very likely to use the same browser and device when browsing the web, this fingerprint can be utilized on different websites to uniquely identify the user.\nIndividual flags in the fingerprint (such as browser name, version, timezone) are not capable of recognizing a user, but the more flags that are added the higher the entropy, and the more likely the user can be uniquely identified by the combination of these browser settings.\nFingerprint APIs that utilize hardware configurations, such as Canvas, Web Audio, and WebGL are most robust, especially when used together. These are also the APIs most targeted by fingerprinting prevention measures.\n You can use the AmIUnique service to check how unique your current fingerprint is.\n Sample AmIUnique result   Browsers are coming down strongly on fingerprinting. Chrome introduced the privacy budget as a concept they\u0026rsquo;re looking into, Safari is actively reducing potential fingerprinting surfaces, Firefox is blocking scripts that distribute fingerprinting tools (as is Edge), and then there are browsers like Brave where fingerprinting protections are front-and-center of development.\nCNAME records Sometimes the web browser is just too unreliable for vendors to leverage efficiently for their cross-site tracking purposes.\nAll the exploits listed above have native preventions in place in many browsers, and there are also browser extensions that help with tracking protection as well.\nThis is why some vendors recommend site owners to set up new domains in their own domain namespace (thus becoming part of first-party context), but instead of pointing to a server owned by the site, the domains would be mapped to vendor servers.\nA simple way to accomplish this is with a CNAME (canonical name) DNS record. The CNAME record maps a hostname such as tracker.domain.com to a web server endpoint, which can be provided by the vendor.\nThe website can then make requests to tracker.domain.com, and the web server at the end of this domain name would have access to all cookies written on tracker.domain.com and domain.com.\n CNAME record in DNS settings   It doesn\u0026rsquo;t solve cross-site tracking by itself, because the endpoint would only have access to cookies written on domain.com (and not, e.g. vendor.com), but by sending the identifiers from link decoration or referrer decoration the vendor can continue profiling the user with little risk of getting the domain blacklisted.\nBrowsers can\u0026rsquo;t natively resolve CNAME records for a given hostname (apart from Firefox, to some extent). However, identifying known trackers in CNAME records is getting more attention, and it is likely that browsers will introduce the necessary APIs so that they can block or restrict this type of data access as well.\n"
},
{
	"uri": "https://www.cookiestatus.com/safari/intelligent-tracking-prevention/",
	"title": "Intelligent Tracking Prevention (ITP)",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/firefox/enhanced-tracking-protection/",
	"title": "Enhanced Tracking Protection (ETP)",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/edge/tracking-prevention/",
	"title": "Tracking Prevention",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/chrome/privacy-sandobx/",
	"title": "Privacy Sandbox",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/introduction/impact/",
	"title": "Impact",
	"tags": [],
	"description": "",
	"content": " TABLE OF CONTENTS  The tracking protection measures taken by browsers have a widespread impact on a variety of things, including web development, advertising and marketing technologies, digital analytics, and user experience optimization.\nWebsites use cookies and other browser storage for a plethora of things, such as persisting login state, preserving items in a shopping cart, and for presenting tailored experiences in a first-party context, based on what the user has done while visiting the site.\nSimilarly, digital analytics uses anonymous/pseudonymous identifiers stored in first-party cookies to identify the hits collected across a span of time as coming from the same browser instance.\nThe methods used for cross-site tracking are often indistinguishable from those harnessed for more mundane purposes. Thus tracking protection measures tend to disrupt regular functionality of the web while seeking to eradicate malicious tracking.\nWeb development Websites regularly utilize cookies in both first-party and third-party context for persisting user authentication, for storing marketing consent, for identifying active sessions, and for operating with \u0026lt;iframe\u0026gt; elements that embed content from other sites.\nCookies in third-party context Because browsers like Edge and Firefox use lists (Trust Protection Lists and Disconnect.me, respectively) to collect information about known trackers, it\u0026rsquo;s unlikely that any regular website would get their domain blacklisted. It would require that domain to participate in a tracking scheme, and for some public push to get the domain classified as a tracking domain.\n Beginning of the Disconnect.me entity list   On browsers like these, using their default tracking protection settings, websites could still continue to operate efficiently with third-party cookies.\nHowever, Safari, in introducing Intelligent Tracking Prevention, can block cookies in a third-party context for domains that don\u0026rsquo;t actually participate in cross-site tracking. Since Safari algorithmically classifies domains on a browser-by-browser basis, it\u0026rsquo;s entirely possible that a regular domain owned by the organization would get classified and thus have its cookies blocked when accessed in a third-party context.\nSafari describes the classifier like this: Out of the various statistics collected, three vectors turned out to have strong signal for classification based on current tracking practices: subresource under number of unique domains, sub frame under number of unique domains, and number of unique domains redirected to.\n Because of this, websites that require third-party cookies should utilize the Storage Access API to get user\u0026rsquo;s consent to access first-party storage for a classified domain.\n Requesting storage access via the API   Cookies in first-party context With browsers such as Chrome, Edge, and Firefox, the first-party context is unimpacted when it comes to tracking protection.\nWith Safari, script-writable storage is impacted by Intelligent Tracking Prevention.\n Cookies set with JavaScript (document.cookie) have a maximum expiration of 7 days or 24 hours, depending on where the user navigated from to the current page. Other script-writable storage is restricted to 7 days in similar navigational scenarios.  This means that websites should avoid setting cookies with JavaScript where possible, and they should similarly avoid leveraging other script-writable storage for long-term persistence.\nCookies should never be used to store or send confidential information. They are inherently insecure, regardless of what flags are set when they are created.\n Websites should set business-critical cookies with the Set-Cookie header using the SameSite and Secure flags. If the cookie does not need to be accessed by JavaScript, then the HttpOnly flag should be set as well.\nBy setting the cookie in an HTTP response, it is unimpacted by Intelligent Tracking Prevention\u0026rsquo;s restrictions on first-party storage.\nReferrer downgrade With cross-origin requests, browsers are moving to a stricter default policy of stripping the referrer to its origin, thus removing all path, query, and fragment identifiers from it.\nSafari is taking an even stricter stance, stripping all cross-origin referrers to their origin, but also downgrading referrers to eTLD+1 (so www.mysite.com/path becomes mysite.com) when the navigation source is a classified domain with URL decoration.\n Navigation from www.gtmtools.com (a classified domain) becomes a referrer string that\u0026#39;s stripped to eTLD\u0026#43;1   Because of the unreliability of the referrer, websites should avoid placing too much importance on interpreting what is stored in the referrer string, especially when using JavaScript\u0026rsquo;s document.referrer.\n Advertising and marketing technologies For AdTech vendors relying on storage access in third-party context, there are some tough times ahead. With Safari, Edge, and Firefox blocking third-party cookies for known trackers, it doesn\u0026rsquo;t take much for a vendor to be blacklisted or classified as a tracker, leading to severely handicapped tracking capabilities.\nVendors are becoming more outspoken in their attempts to work around browser restrictions. Some companies are approaching site owners with instructions on how to setup CNAME redirects and reverse proxies to avoid ad blockers from preventing data collection. The ethical nature of such approaches is questionable at best.\nEven advertising that takes place in a first-party context (such as Google\u0026rsquo;s search ads) is being hampered by browsers\u0026rsquo; efforts. Safari\u0026rsquo;s Intelligent Tracking Prevention reduces the maximum expiration for cookies and browser storage if the user navigates to the site from an ad click, and if the source of the navigation is a known tracker (e.g. Facebook or Google). Thus the site\u0026rsquo;s capability to attribute a conversion taking place in the near future to the ad click is compromised.\nIn short, for vendors requiring browser storage access in third-party context, these broad impacts can be observed:\n Ability to build graphs and profiles of users is restricted. Ability to target ads based on graphs and profiles of users is restricted. Ability to manage ad frequency is restricted. Ability to model attribution for view-through conversions is restricted. Ability to participate in cookie matching is restricted. Ability to provide demographics and interest data for analytics systems is restricted.  For vendors needing browser storage access in first-party context, these handicaps are in place:\n Ability to attribute conversions to ad clicks is somewhat restricted. Ability to measure efficiency of advertising is somewhat restricted. Ability to look back beyond the last touch in attribution models is somewhat restricted.  \u0026ldquo;Somewhat restricted\u0026rdquo; above refers to the fact that out of the major browsers, only Safari is currently restricting first-party storage access. Thus the severity of these restrictions depends on the typical share of Safari traffic on the advertised website.\n Digital analytics Digital analytics is an industry that measures, among other things, the effectiveness and return on investment of advertising.\nThere are analytics ventures that rely on cross-site tracking to analyze how uses are navigating across the websites of the internet, though much of this analytics is often done in addition to the primary focus of targeted advertising.\nHowever, there is an industry of first-party analytics, where the focus is on users who browse the website (or websites) of the organization, providing data and information about user behavior. This data can then be used to improve the user experience of the site, to build more effective campaigns, and to attribute conversions to different channels.\n Google Analytics is the most popular web analytics platform in use   On Chrome, Firefox, and Edge, the capabilities of digital analytics are not really restricted. Because much of digital analytics works with browser storage in first-party context, the restrictions on known trackers in third-party context do not impact the capability to monitor users browsing the website itself.\nHowever, on Safari, especially since ITP 2.1, the accuracy of first-party analytics has been compromised as well.\nWeb analytics tools such as Google Analytics drop a first-party cookie when the user first visits a website. This cookie is typically given a long expiration, such as two years, and the cookie expiration is reset each time a Google Analytics script runs on the page.\nThe cookie value is random and unique - by default Google Analytics uses a random number and the timestamp of when the cookie was set (e.g. GA1.2.123456789.1575363021), but sometimes the identifier is just a UUID.\nGoogle Analytics uses this cookie to identify that the separate hits coming from a user\u0026rsquo;s browser belong, in fact, to the same browser.\n ITP impact on first-party analytics   Because this cookie is set with JavaScript, Safari\u0026rsquo;s ITP restricts its expiration to the maximum of 7 days. This means that as long as the user visits the site with fewer than 7 days between each visit (and don\u0026rsquo;t flush cookies for any other reason), they would be considered the same user. But if the visit frequency ever goes past 7 days, the user\u0026rsquo;s cookie is reset and they would be considered a \u0026ldquo;New user\u0026rdquo; by the analytics tool.\nWith ITP 2.2, cookie expiration is reduced to 1 day if the user followed a decorated link from a known tracker (e.g. a Google ad click), making it even more difficult to analyze user behavior past a very short time window.\n Websites can move these identifier cookies to HTTP responses rather than have them be set with JavaScript. For now, this would preserve the expiraton of such cookies.\nReferrer downgrade impacts web analytics as well, because these platforms often provide channel data based on campaign identifiers in the URL and/or information stored in the referrer string. By downgrading referrers to their origins, web analytics tools can no longer accurately measure which particular page brought the user to the current site.\nUser experience optimization Here, user experience optimization covers the broad topics of conversion (rate) optimization and content personalization. The purpose of such efforts is to dynamically alter what the user might see on a website, based on random distribution to different variants, or based on targeting algorithms that choose the most suitable variant or content for the user.\nFor experimentation and data collection, it\u0026rsquo;s important that the user\u0026rsquo;s experience on the site be consistent. Being exposed to a different variant of the site with every page load can lead to confusion and introduce friction, especially in ecommerce contexts.\nTo ensure consistency, optimization platforms set an identifier in the user\u0026rsquo;s browser storage that tells these platforms which experimentation variant or personalization group they belong to. This storage would typically be accessed in a first-party context, but if the optimization derives targeting parameters from a global profile, the storage access might be required in a third-party context, too.\nBecause the vendors often provide their solutions using global content delivery networks (CDN), these domains tend to get blacklisted in browsers\u0026rsquo; tracking protection lists and algorithms. Thus their capability to deliver experiences based on data harvested from third-party storage is compromised.\nSimilar to digital analytics, first-party storage is also restricted on Safari. Due to the short expiration time of script-writable storage, experimentation and personalization platforms can\u0026rsquo;t deliver consistent experiences. In addition to this, the inability to control the sample sizes and deduplicate conversions often leads to too much noise in the calculation of statistical significance for the experimentation variations.\nOptimization platforms and websites running them should look into utilizing HTTP headers for getting and setting these cookies and for determining which content to show to the user, rather than the JavaScript APIs that have been compromised by Safari\u0026rsquo;s ITP.\n"
},
{
	"uri": "https://www.cookiestatus.com/safari/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/firefox/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/edge/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/chrome/useful-resources/",
	"title": "Useful resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/glossary/",
	"title": "Glossary",
	"tags": [],
	"description": "",
	"content": " TABLE OF CONTENTS  This is a glossary of terms used in the website.\nAdTech Lorem ipsum\nAnalytics Lorem ipsum\nBlink Lorem ipsum\nChromium Lorem ipsum\nConversion Lorem ipsum\nCookie Lorem ipsum\nCookie matching / syncing Lorem ipsum\nCross-site tracking Lorem ipsum\nEnhanced Tracking Protection (ETP) Lorem ipsum\neTLD+1 Lorem ipsum\nFirst-party Lorem ipsum\nIntelligent Tracking Prevention (ITP) Lorem Ipsum\nLink decoration Lorem ipsum\nMozilla Lorem ipsum\nReferrer Lorem ipsum\nReferrer downgrade Lorem ipsum\nScript-writable storage Lorem ipsum\nThird-party Lorem ipsum\nWebKit Lorem ipsum\n"
},
{
	"uri": "https://www.cookiestatus.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.cookiestatus.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]